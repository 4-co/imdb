name: Docker Image Build

on:
  pull_request:
    branches:
      - main

    paths-ignore:
    - '.devcontainer/**'
    - 'docs/**'
    - '**.md'

  push:
    branches:
      - main

    paths-ignore:
    - '.devcontainer/**'
    - 'docs/**'
    - '**.md'

    tags:
      - v*

jobs:

  docker-build-push:

    runs-on: ubuntu-latest
    env:
      # copy the config value to environment variables
      # do not copy the actual secrets!

      DOCKER_REPO: ${{ secrets.DOCKER_REPO }}

      # used in if: conditions
      DOCKER_SET: false

    steps:
    - uses: actions/checkout@v2

    - name: Set conditions
      run: |
        # check that all Docker secrets are set
        if [[ "${{ secrets.DOCKER_PAT }}" != "" && "${{ secrets.DOCKER_REPO }}" != "" && "${{ secrets.DOCKER_USER }}" != "" ]];
        then
          echo "DOCKER_SET=true" >> $GITHUB_ENV
        fi

    - name: Docker Pull
      run: |
        # Pull the latest image if needed
        # This doesn't have to be a separate step, but makes the output easier to read and debug
        docker pull mcr.microsoft.com/dotnet/core/sdk:3.1
        docker pull mcr.microsoft.com/dotnet/core/aspnet:3.1-alpine

    - name: Build Container
      run: docker build . -t imdb-import

    - name: Docker Push
      if: ${{ env.DOCKER_SET == 'true' }}
      run: |

        # login to dockerhub
        echo "${{ secrets.DOCKER_PAT }}" | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin

        # tag the repo with :beta
        docker tag imdb-import $DOCKER_REPO:beta

        # Tag image based on repo tag if a github label
        if [[ "${{ github.ref }}" == "refs/tags/"* ]]
        then

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,'  | sed -e 's/^v//')

          # tag the image with :version and :stable
          docker tag imdb-import $DOCKER_REPO:$VERSION
          docker tag imdb-import $DOCKER_REPO:latest
        fi

        # Push to the repo
        docker push $DOCKER_REPO
